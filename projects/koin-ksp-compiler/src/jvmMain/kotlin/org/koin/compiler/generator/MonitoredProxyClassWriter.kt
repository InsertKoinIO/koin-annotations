package org.koin.compiler.generator

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import org.koin.compiler.generator.KoinCodeGenerator.Companion.LOGGER
import org.koin.compiler.metadata.KoinMetaData

class MonitoredProxyClassWriter(
    codeGenerator: CodeGenerator,
    val resolver: Resolver,
    val definition: KoinMetaData.Definition.ClassDefinition,
) : AbstractFileWriter(codeGenerator) {

    override val fileName : String = generateApplicationFileName(definition)
    private fun generateApplicationFileName(m: KoinMetaData.Definition): String {
        val extensionName = m.packageName("$")
        return "${m.label}Proxy${extensionName}"
    }

    fun writeProxy() {
        fileStream = createFileStream()
        val fullClassName = definition.packageName+"."+definition.className
        val declaration = resolver.getClassDeclarationByName(resolver.getKSNameFromString(fullClassName))
        if (declaration != null){
            writeHeader()

            val bypassed = listOf("<init>")

            val primaryConstructor = declaration.primaryConstructor?.parameters
            val ctorTyped = if (primaryConstructor?.isEmpty() == true) "" else primaryConstructor?.joinToString(", ") { "${it.name?.asString()} : ${it.type.resolve().declaration.qualifiedName?.asString()}" }
            val ctorList = if (primaryConstructor?.isEmpty() == true) "" else primaryConstructor?.joinToString(", ") { "${it.name?.asString()}" }
            writeln("""
            /**
             * Generated by @Monitor - Koin proxy for '${definition.className}'
             * 
             * Automatically monitors all method calls and reports performance data to the Kotzilla Platform,
             * the official Koin platform tools (https://kotzilla.io).
             * Requires 'io.kotzilla:kotzilla-core' dependency.
             * 
             * @see <a href="https://doc.kotzilla.io">Documentation</a>
             * @see <a href="https://doc.kotzilla.io/docs/releaseNotes/changelogSDK">Latest Version</a>
             * @generated Do not modify - auto-generated class
             */
            """.trimIndent())
            writeln("class ${definition.className}Proxy($ctorTyped) : ${fullClassName}($ctorList) {")

            declaration.getAllFunctions()
                .filter { it.simpleName.asString() !in bypassed }
                .filter { it.parentDeclaration == declaration }
                .toList()
                .forEach { writeFunction(definition, it) }

            writeln("}")


        } else {
            LOGGER.warn("[DEBUG] Can't create proxy for class '${definition.className}'. Class not found")
        }
    }

    private fun writeFunction(definition : KoinMetaData.Definition.ClassDefinition, functionDeclaration: KSFunctionDeclaration) {
        val functionName = functionDeclaration.simpleName.asString()
        val functionParam = functionDeclaration.parameters.joinToString(", ") { "${it.name?.asString()} : ${it.type.resolve().declaration.qualifiedName?.asString()}" }
        val functionParamCall = functionDeclaration.parameters.joinToString(", ") { "${it.name?.asString()} " }

        val modifiers = if (functionDeclaration.modifiers.isEmpty()) "" else functionDeclaration.modifiers.joinToString(" ", postfix = " ") { "$it".lowercase() }
        val isSuspend = modifiers.contains("suspend")
        val returnedType = buildReturnTypeString(functionDeclaration)
        val traceFunction = if (isSuspend) "KotzillaCore.getDefaultInstance().suspendTrace" else "KotzillaCore.getDefaultInstance().trace"

        writeln("\toverride ${modifiers}fun $functionName($functionParam) : $returnedType { return $traceFunction(\"${definition.className}.$functionName\") { super.${functionName}($functionParamCall) } }")
    }

    private fun buildReturnTypeString(functionDeclaration: KSFunctionDeclaration): String {
        val returnType = functionDeclaration.returnType?.resolve()
        return if (returnType != null) {
            buildTypeString(returnType)
        } else {
            "Unit"
        }
    }

    private fun buildTypeString(type: com.google.devtools.ksp.symbol.KSType): String {
        val declaration = type.declaration
        val baseTypeName = declaration.qualifiedName?.asString() ?: "Unit"
        val nullSuffix = if (type.isMarkedNullable) "?" else ""
        
        val typeArguments = type.arguments
        val fullTypeName = if (typeArguments.isNotEmpty()) {
            val genericTypes = typeArguments.joinToString(", ") { arg ->
                val resolvedArg = arg.type?.resolve()
                if (resolvedArg != null) {
                    buildTypeString(resolvedArg)
                } else {
                    "*"
                }
            }
            "$baseTypeName<$genericTypes>"
        } else {
            baseTypeName
        }
        return "$fullTypeName$nullSuffix"
    }

    private fun writeHeader() {
        writeln("""
            package org.koin.ksp.generated
            
            import io.kotzilla.sdk.KotzillaCore
            
        """.trimIndent())
    }
}